#!/usr/bin/env node

/**
 * PRODUCTION CONFIGURATION CHECKER
 * Quick diagnostic tool for production issues
 */

import { createClient } from '@supabase/supabase-js';\nimport fetch from 'node-fetch';\n\n// Production URLs\nconst PRODUCTION_URL = 'https://testingvala.com';\nconst VERCEL_URL = 'https://testingvala-admin-user.vercel.app';\n\n// Environment check\nfunction checkEnvironment() {\n  console.log('üîß ENVIRONMENT VARIABLES:');\n  console.log('VITE_SUPABASE_URL:', process.env.VITE_SUPABASE_URL ? '‚úÖ Set' : '‚ùå Missing');\n  console.log('VITE_SUPABASE_ANON_KEY:', process.env.VITE_SUPABASE_ANON_KEY ? '‚úÖ Set' : '‚ùå Missing');\n  console.log('ZEPTO_API_KEY:', process.env.ZEPTO_API_KEY ? '‚úÖ Set' : '‚ùå Missing');\n  console.log('ZEPTO_FROM_EMAIL:', process.env.ZEPTO_FROM_EMAIL || '‚ùå Missing');\n  console.log('');\n}\n\n// Test Supabase connection\nasync function testSupabase() {\n  console.log('üóÑÔ∏è SUPABASE CONNECTION:');\n  \n  if (!process.env.VITE_SUPABASE_URL || !process.env.VITE_SUPABASE_ANON_KEY) {\n    console.log('‚ùå Supabase credentials missing');\n    return false;\n  }\n  \n  try {\n    const supabase = createClient(\n      process.env.VITE_SUPABASE_URL,\n      process.env.VITE_SUPABASE_ANON_KEY\n    );\n    \n    // Test basic connection\n    const { data, error } = await supabase.from('website_content').select('id').limit(1);\n    \n    if (error) {\n      console.log('‚ùå Connection failed:', error.message);\n      return false;\n    }\n    \n    console.log('‚úÖ Basic connection working');\n    \n    // Test auth functions\n    try {\n      const { data: authTest, error: authError } = await supabase.rpc('generate_magic_link_token', {\n        user_email: 'test@example.com'\n      });\n      \n      if (authError) {\n        console.log('‚ùå Auth functions not configured:', authError.message);\n        console.log('   ‚Üí Run supabase-auth-config.sql in your dashboard');\n      } else {\n        console.log('‚úÖ Auth functions working');\n      }\n    } catch (e) {\n      console.log('‚ùå Auth functions test failed:', e.message);\n    }\n    \n    return true;\n  } catch (error) {\n    console.log('‚ùå Supabase test failed:', error.message);\n    return false;\n  }\n}\n\n// Test ZeptoMail\nasync function testZeptoMail() {\n  console.log('\\nüìß ZEPTOMAIL CONNECTION:');\n  \n  if (!process.env.ZEPTO_API_KEY) {\n    console.log('‚ùå ZeptoMail API key missing');\n    return false;\n  }\n  \n  try {\n    const response = await fetch('https://api.zeptomail.in/v1.1/email', {\n      method: 'POST',\n      headers: {\n        'Authorization': process.env.ZEPTO_API_KEY,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        from: { \n          address: process.env.ZEPTO_FROM_EMAIL || 'info@testingvala.com', \n          name: 'TestingVala Audit' \n        },\n        to: [{ email_address: { address: 'audit@testingvala.com' } }],\n        subject: 'Production Audit Test - IGNORE',\n        htmlbody: '<p>This is an audit test email</p>'\n      })\n    });\n    \n    const result = await response.text();\n    \n    if (response.status === 400 && result.includes('sandbox')) {\n      console.log('‚ùå ZeptoMail in SANDBOX mode');\n      console.log('   ‚Üí Disable sandbox in ZeptoMail dashboard');\n      return false;\n    } else if (response.status === 401) {\n      console.log('‚ùå Invalid API key');\n      return false;\n    } else if (response.status === 200 || response.status === 202) {\n      console.log('‚úÖ ZeptoMail API working');\n      return true;\n    } else {\n      console.log(`‚ö†Ô∏è Unexpected status: ${response.status}`);\n      console.log('Response:', result);\n      return false;\n    }\n  } catch (error) {\n    console.log('‚ùå ZeptoMail test failed:', error.message);\n    return false;\n  }\n}\n\n// Test production endpoints\nasync function testProductionEndpoints() {\n  console.log('\\nüöÄ PRODUCTION ENDPOINTS:');\n  \n  const endpoints = [\n    { name: 'Main Site', url: PRODUCTION_URL },\n    { name: 'Vercel App', url: VERCEL_URL },\n    { name: 'Health API', url: `${PRODUCTION_URL}/api/health` },\n    { name: 'Magic Link API', url: `${PRODUCTION_URL}/api/send-magic-link` }\n  ];\n  \n  for (const endpoint of endpoints) {\n    try {\n      const response = await fetch(endpoint.url, {\n        method: endpoint.name.includes('Magic Link') ? 'POST' : 'GET',\n        headers: endpoint.name.includes('Magic Link') ? { 'Content-Type': 'application/json' } : {},\n        body: endpoint.name.includes('Magic Link') ? JSON.stringify({ email: 'test@example.com' }) : undefined,\n        timeout: 10000\n      });\n      \n      if (response.ok || response.status === 400) { // 400 is expected for invalid magic link requests\n        console.log(`‚úÖ ${endpoint.name}: Accessible`);\n      } else {\n        console.log(`‚ùå ${endpoint.name}: Status ${response.status}`);\n      }\n    } catch (error) {\n      console.log(`‚ùå ${endpoint.name}: ${error.message}`);\n    }\n  }\n}\n\n// Test magic link flow\nasync function testMagicLinkFlow() {\n  console.log('\\nüîê MAGIC LINK FLOW TEST:');\n  \n  try {\n    const response = await fetch(`${PRODUCTION_URL}/api/send-magic-link`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        email: 'audit-test@testingvala.com',\n        deviceId: 'audit-device-123'\n      })\n    });\n    \n    const result = await response.json();\n    \n    if (response.ok && result.success) {\n      console.log('‚úÖ Magic link API working');\n      console.log(`   Message ID: ${result.messageId}`);\n      \n      if (result.magicLink) {\n        console.log(`   üîó Test Link: ${result.magicLink}`);\n      }\n      \n      if (result.provider === 'development') {\n        console.log('‚ö†Ô∏è Running in development mode (ZeptoMail failed)');\n      }\n    } else {\n      console.log('‚ùå Magic link failed:', result.error);\n    }\n  } catch (error) {\n    console.log('‚ùå Magic link test error:', error.message);\n  }\n}\n\n// Main audit function\nasync function runAudit() {\n  console.log('üîç PRODUCTION CONFIGURATION AUDIT');\n  console.log('=' .repeat(50));\n  \n  checkEnvironment();\n  await testSupabase();\n  await testZeptoMail();\n  await testProductionEndpoints();\n  await testMagicLinkFlow();\n  \n  console.log('\\nüìã MANUAL CHECKS REQUIRED:');\n  console.log('1. Supabase Auth Settings:');\n  console.log('   ‚Üí Site URL: https://testingvala.com');\n  console.log('   ‚Üí Redirect URLs: https://testingvala.com/auth/verify');\n  console.log('   ‚Üí Email confirmations: DISABLED');\n  console.log('');\n  console.log('2. ZeptoMail Settings:');\n  console.log('   ‚Üí Sandbox mode: DISABLED');\n  console.log('   ‚Üí Domain verified: testingvala.com');\n  console.log('   ‚Üí DNS records: SPF, DKIM, DMARC configured');\n  console.log('');\n  console.log('3. Vercel Environment Variables:');\n  console.log('   ‚Üí All environment variables set in production');\n  console.log('   ‚Üí Function regions configured correctly');\n  console.log('');\n  console.log('‚úÖ Audit complete!');\n}\n\n// Run if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  runAudit().catch(console.error);\n}\n\nexport { runAudit };\n