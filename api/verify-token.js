// PRODUCTION TOKEN VERIFICATION API\n// Handles magic link token verification with proper error handling\n\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.VITE_SUPABASE_URL;\nconst supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseKey) {\n  console.error('Missing Supabase configuration');\n}\n\nconst supabase = supabaseUrl && supabaseKey ? createClient(supabaseUrl, supabaseKey) : null;\n\nexport default async function handler(req, res) {\n  const requestId = Math.random().toString(36).substring(2, 15);\n  const startTime = Date.now();\n  \n  try {\n    console.log(`[verify-token] [${requestId}] === REQUEST STARTED ===`);\n    \n    // Set CORS headers\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n    res.setHeader('Content-Type', 'application/json');\n    \n    if (req.method === 'OPTIONS') {\n      return res.status(200).end();\n    }\n    \n    if (req.method !== 'GET') {\n      return res.status(405).json({ error: 'Method not allowed' });\n    }\n\n    const { token, email } = req.query;\n    \n    console.log(`[verify-token] [${requestId}] Verifying token for:`, email);\n    \n    if (!token || !email) {\n      return res.status(400).json({ \n        error: 'Missing token or email parameter',\n        code: 'MISSING_PARAMS'\n      });\n    }\n    \n    if (!supabase) {\n      console.error(`[verify-token] [${requestId}] Supabase not configured`);\n      return res.status(500).json({ \n        error: 'Authentication service not available',\n        code: 'SERVICE_UNAVAILABLE'\n      });\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      return res.status(400).json({ \n        error: 'Invalid email format',\n        code: 'INVALID_EMAIL'\n      });\n    }\n\n    // Validate token format (should be 64 character hex string)\n    if (!/^[a-f0-9]{64}$/i.test(token)) {\n      return res.status(400).json({ \n        error: 'Invalid token format',\n        code: 'INVALID_TOKEN_FORMAT'\n      });\n    }\n\n    console.log(`[verify-token] [${requestId}] Calling Supabase verification function`);\n    \n    // Call Supabase verification function\n    const { data: verificationResult, error: verificationError } = await supabase\n      .rpc('verify_magic_link_token', {\n        token: token,\n        user_email: email.toLowerCase().trim()\n      });\n\n    if (verificationError) {\n      console.error(`[verify-token] [${requestId}] Supabase error:`, verificationError);\n      \n      // Handle specific Supabase errors\n      if (verificationError.code === 'PGRST202') {\n        return res.status(400).json({ \n          error: 'Verification function not found. Please contact support.',\n          code: 'FUNCTION_NOT_FOUND'\n        });\n      }\n      \n      return res.status(500).json({ \n        error: 'Verification service error',\n        code: 'VERIFICATION_ERROR',\n        details: verificationError.message\n      });\n    }\n\n    if (!verificationResult) {\n      return res.status(500).json({ \n        error: 'No verification result returned',\n        code: 'NO_RESULT'\n      });\n    }\n\n    console.log(`[verify-token] [${requestId}] Verification result:`, {\n      success: verificationResult.success,\n      hasUser: !!verificationResult.user,\n      hasToken: !!verificationResult.access_token\n    });\n\n    if (!verificationResult.success) {\n      const errorCode = verificationResult.error?.includes('expired') ? 'TOKEN_EXPIRED' :\n                       verificationResult.error?.includes('used') ? 'TOKEN_USED' :\n                       verificationResult.error?.includes('Invalid') ? 'TOKEN_INVALID' :\n                       'VERIFICATION_FAILED';\n      \n      return res.status(400).json({ \n        error: verificationResult.error || 'Token verification failed',\n        code: errorCode\n      });\n    }\n\n    // Success - create redirect URL with session data\n    const sessionData = {\n      email: verificationResult.user.email,\n      userId: verificationResult.user.id,\n      verified: true,\n      timestamp: Date.now()\n    };\n\n    const sessionToken = Buffer.from(JSON.stringify(sessionData)).toString('base64');\n    const redirectUrl = `${req.headers.origin || 'https://testingvala.com'}/auth/verify?success=true&session=${sessionToken}`;\n\n    console.log(`[verify-token] [${requestId}] âœ… VERIFICATION SUCCESSFUL`, {\n      email: verificationResult.user.email,\n      userId: verificationResult.user.id,\n      duration: `${Date.now() - startTime}ms`\n    });\n\n    // Redirect to success page\n    res.writeHead(302, {\n      Location: redirectUrl\n    });\n    res.end();\n\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    console.error(`[verify-token] [${requestId}] ERROR:`, {\n      message: error.message,\n      stack: error.stack,\n      duration: `${duration}ms`\n    });\n    \n    // Handle different error types\n    if (error.message.includes('fetch')) {\n      return res.status(503).json({\n        error: 'Service temporarily unavailable',\n        code: 'SERVICE_UNAVAILABLE'\n      });\n    }\n    \n    return res.status(500).json({\n      error: 'Internal server error',\n      code: 'INTERNAL_ERROR',\n      requestId\n    });\n  }\n}\n