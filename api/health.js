// HEALTH CHECK API ENDPOINT\n// Provides system status for production monitoring\n\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.VITE_SUPABASE_URL;\nconst supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;\nconst zeptoApiKey = process.env.ZEPTO_API_KEY;\n\nexport default async function handler(req, res) {\n  const startTime = Date.now();\n  \n  try {\n    // Set CORS headers\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n    res.setHeader('Content-Type', 'application/json');\n    \n    if (req.method === 'OPTIONS') {\n      return res.status(200).end();\n    }\n    \n    if (req.method !== 'GET') {\n      return res.status(405).json({ error: 'Method not allowed' });\n    }\n\n    const health = {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      version: '1.0.0',\n      environment: 'production',\n      services: {},\n      checks: {}\n    };\n\n    // Check environment variables\n    health.checks.environment = {\n      supabase_url: !!supabaseUrl,\n      supabase_key: !!supabaseKey,\n      zepto_api_key: !!zeptoApiKey,\n      zepto_from_email: !!process.env.ZEPTO_FROM_EMAIL\n    };\n\n    // Test Supabase connection\n    if (supabaseUrl && supabaseKey) {\n      try {\n        const supabase = createClient(supabaseUrl, supabaseKey);\n        const { data, error } = await supabase\n          .from('website_content')\n          .select('id')\n          .limit(1);\n        \n        health.services.supabase = {\n          status: error ? 'error' : 'healthy',\n          error: error?.message,\n          response_time: Date.now() - startTime\n        };\n      } catch (error) {\n        health.services.supabase = {\n          status: 'error',\n          error: error.message\n        };\n      }\n    } else {\n      health.services.supabase = {\n        status: 'not_configured',\n        error: 'Missing Supabase credentials'\n      };\n    }\n\n    // Test ZeptoMail API (lightweight check)\n    if (zeptoApiKey) {\n      try {\n        const response = await fetch('https://api.zeptomail.in/v1.1/email', {\n          method: 'POST',\n          headers: {\n            'Authorization': zeptoApiKey,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            from: { address: 'health@testingvala.com', name: 'Health Check' },\n            to: [{ email_address: { address: 'nonexistent@testingvala.com' } }],\n            subject: 'Health Check - DO NOT SEND',\n            htmlbody: '<p>Health check</p>'\n          })\n        });\n\n        const result = await response.text();\n        \n        health.services.zeptomail = {\n          status: response.status === 401 ? 'auth_error' : \n                 response.status === 400 && result.includes('sandbox') ? 'sandbox_mode' :\n                 response.status === 400 ? 'healthy' : 'unknown',\n          http_status: response.status,\n          response_time: Date.now() - startTime\n        };\n      } catch (error) {\n        health.services.zeptomail = {\n          status: 'error',\n          error: error.message\n        };\n      }\n    } else {\n      health.services.zeptomail = {\n        status: 'not_configured',\n        error: 'Missing ZeptoMail API key'\n      };\n    }\n\n    // Overall health status\n    const hasErrors = Object.values(health.services).some(service => \n      service.status === 'error' || service.status === 'not_configured'\n    );\n    \n    if (hasErrors) {\n      health.status = 'degraded';\n    }\n\n    health.response_time = Date.now() - startTime;\n\n    const statusCode = health.status === 'healthy' ? 200 : \n                      health.status === 'degraded' ? 200 : 503;\n\n    return res.status(statusCode).json(health);\n\n  } catch (error) {\n    return res.status(500).json({\n      status: 'error',\n      timestamp: new Date().toISOString(),\n      error: error.message,\n      response_time: Date.now() - startTime\n    });\n  }\n}\n